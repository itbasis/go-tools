// Code generated by MockGen. DO NOT EDIT.
// Source: token-parser.go
//
// Generated by this command:
//
//	mockgen -source=token-parser.go -package=token -destination=token-parser.mock.go
//

// Package token is a generated GoMock package.
package token

import (
	context "context"
	reflect "reflect"

	model "github.com/itbasis/tools/middleware/auth/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJwtTokenParser is a mock of JwtTokenParser interface.
type MockJwtTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockJwtTokenParserMockRecorder
	isgomock struct{}
}

// MockJwtTokenParserMockRecorder is the mock recorder for MockJwtTokenParser.
type MockJwtTokenParserMockRecorder struct {
	mock *MockJwtTokenParser
}

// NewMockJwtTokenParser creates a new mock instance.
func NewMockJwtTokenParser(ctrl *gomock.Controller) *MockJwtTokenParser {
	mock := &MockJwtTokenParser{ctrl: ctrl}
	mock.recorder = &MockJwtTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtTokenParser) EXPECT() *MockJwtTokenParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockJwtTokenParser) Parse(ctx context.Context, tokenString string) (*model.SessionUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, tokenString)
	ret0, _ := ret[0].(*model.SessionUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockJwtTokenParserMockRecorder) Parse(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockJwtTokenParser)(nil).Parse), ctx, tokenString)
}
